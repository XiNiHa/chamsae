//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::Visibility;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "post")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub reply_id: Option<Uuid>,
    pub text: String,
    pub title: Option<String>,
    pub user_id: Option<Uuid>,
    pub visibility: Visibility,
    pub is_sensitive: bool,
    #[sea_orm(unique)]
    pub uri: String,
    pub repost_id: Option<Uuid>,
    pub source_content: Option<String>,
    pub source_media_type: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::hashtag::Entity")]
    Hashtag,
    #[sea_orm(has_many = "super::local_file::Entity")]
    LocalFile,
    #[sea_orm(has_many = "super::mention::Entity")]
    Mention,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ReplyId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    SelfRef2,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::RepostId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    SelfRef1,
    #[sea_orm(has_many = "super::post_emoji::Entity")]
    PostEmoji,
    #[sea_orm(has_many = "super::reaction::Entity")]
    Reaction,
    #[sea_orm(has_many = "super::remote_file::Entity")]
    RemoteFile,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::hashtag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Hashtag.def()
    }
}

impl Related<super::local_file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LocalFile.def()
    }
}

impl Related<super::mention::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Mention.def()
    }
}

impl Related<super::post_emoji::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostEmoji.def()
    }
}

impl Related<super::reaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reaction.def()
    }
}

impl Related<super::remote_file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RemoteFile.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
