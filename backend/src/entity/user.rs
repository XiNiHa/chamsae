//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub last_fetched_at: DateTimeWithTimeZone,
    pub handle: String,
    pub name: Option<String>,
    pub host: String,
    pub inbox: String,
    pub public_key: String,
    #[sea_orm(unique)]
    pub uri: String,
    pub avatar_url: Option<String>,
    pub banner_url: Option<String>,
    pub shared_inbox: Option<String>,
    pub manually_approves_followers: bool,
    pub is_bot: bool,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::follow::Entity")]
    Follow,
    #[sea_orm(has_many = "super::follower::Entity")]
    Follower,
    #[sea_orm(has_many = "super::post::Entity")]
    Post,
    #[sea_orm(has_many = "super::reaction::Entity")]
    Reaction,
    #[sea_orm(has_many = "super::report::Entity")]
    Report,
}

impl Related<super::follow::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Follow.def()
    }
}

impl Related<super::follower::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Follower.def()
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl Related<super::reaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reaction.def()
    }
}

impl Related<super::report::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Report.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
